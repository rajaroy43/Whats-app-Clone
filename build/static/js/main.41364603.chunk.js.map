{"version":3,"sources":["firebase.js","StateProvider.js","Chat.js","SidebarChat.js","SideBar.js","Login.js","Welcome.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","storage","StateContext","createContext","StateProvider","reducer","initalState","children","Provider","value","useReducer","useStatevalue","useContext","Chat","useState","input","setinput","roomid","useParams","roomName","setroomName","messages","setmessages","user","inputFile","setinputFile","progress","setProgress","scrollRef","useRef","showEmoji","setshowEmoji","record","setrecord","useEffect","collection","doc","onSnapshot","snapshot","data","name","orderBy","docs","map","current","scrollTop","scrollHeight","scrollIntoView","behavior","length","sendMessage","e","a","preventDefault","ref","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","url","add","displayName","timestamp","FieldValue","serverTimestamp","replaceAll","className","Avatar","src","Date","toDate","toUTCString","IconButton","index","href","download","max","onClick","onEmojiClick","event","eventObj","emoji","title","action","onSubmit","type","id","onChange","target","files","placeholder","onStop","recordedBlob","onData","strokeColor","backgroundColor","visualSetting","mimeType","SidebarChat","addNewChat","window","prompt","to","SideBar","rooms","setrooms","unsubscribe","photoURL","signOut","room","key","Login","dispatch","signIn","signInWithPopup","result","alt","Button","Welcome","loop","autoPlay","App","onAuthStateChanged","path","exact","Boolean","location","hostname","match","state","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.41364603.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDm-dC_JopkmxGEEHpTT0bghC9YHWRR7Sw\",\r\n    authDomain: \"whatsapp-clone-d770f.firebaseapp.com\",\r\n    databaseURL: \"https://whatsapp-clone-d770f.firebaseio.com\",\r\n    projectId: \"whatsapp-clone-d770f\",\r\n    storageBucket: \"whatsapp-clone-d770f.appspot.com\",\r\n    messagingSenderId: \"945467437377\",\r\n    appId: \"1:945467437377:web:20cd479be46fd704e5f1c0\",\r\n    measurementId: \"G-T7ZMX29SC4\"\r\n  };\r\n\r\nconst firebaseApp=firebase.initializeApp(firebaseConfig);\r\nconst db=firebaseApp.firestore();\r\nconst auth=firebase.auth();\r\nconst provider=new firebase.auth.GoogleAuthProvider();\r\nconst storage=firebase.storage();\r\nexport {auth,provider,storage}\r\nexport default db;","import React,{ createContext, useContext, useReducer } from \"react\";\r\nconst StateContext = createContext();\r\nexport const StateProvider=({reducer,initalState,children})=>{\r\n    return(\r\n    <StateContext.Provider value={useReducer(reducer,initalState)}>\r\n    {children}\r\n    </StateContext.Provider>\r\n    );\r\n};\r\nexport const useStatevalue=()=>useContext(StateContext);\r\n\r\n\r\n","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./Chat.css\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\r\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport db, { storage } from \"./firebase\";\r\nimport { useStatevalue } from \"./StateProvider\";\r\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\r\nimport firebase from \"firebase\";\r\nimport Picker from \"emoji-picker-react\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport { ReactMic } from \"react-mic\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nfunction Chat() {\r\n  const [input, setinput] = useState(\"\");\r\n  const { roomid } = useParams();\r\n  const [roomName, setroomName] = useState(\"\");\r\n  const [messages, setmessages] = useState([]);\r\n  const [{ user }] = useStatevalue();\r\n  const [inputFile, setinputFile] = useState(\"\");\r\n  const [progress, setProgress] = useState(0);\r\n  const scrollRef = useRef(null);\r\n  const [showEmoji, setshowEmoji] = useState(false);\r\n  const [record, setrecord] = useState(false);\r\n  useEffect(() => {\r\n    if (roomid) {\r\n      db.collection(\"rooms\")\r\n        .doc(roomid)\r\n        .onSnapshot((snapshot) => setroomName(snapshot.data().name));\r\n\r\n      db.collection(\"rooms\")\r\n        .doc(roomid)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snapshot) =>\r\n          setmessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n\r\n    if (scrollRef.current) {\r\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\r\n      scrollRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [roomid, messages.length]);\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (inputFile) {\r\n      const uploadTask = storage.ref(`File/${inputFile.name}`).put(inputFile);\r\n      uploadTask.on(\r\n        \"state_changed\",\r\n\r\n        (snapshot) => {\r\n          const progress = Math.round(\r\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n          );\r\n          setProgress(progress);\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n          alert(error.message);\r\n          setinputFile(\"\");\r\n        },\r\n        async () => {\r\n          const url = await storage\r\n            .ref(\"File\")\r\n            .child(inputFile.name)\r\n            .getDownloadURL();\r\n          console.log(url);\r\n          //post imageinto database\r\n          await db.collection(\"rooms\").doc(roomid).collection(\"messages\").add({\r\n            message: input,\r\n            name: user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            url: url,\r\n          });\r\n          setProgress(0);\r\n        }\r\n      );\r\n    } else {\r\n      const checkEmpty = input.replaceAll(\" \", \"\");\r\n      if (checkEmpty) {\r\n        db.collection(\"rooms\").doc(roomid).collection(\"messages\").add({\r\n          message: input,\r\n          name: user.displayName,\r\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        });\r\n      }\r\n    }\r\n    setinput(\"\");\r\n    setinputFile(\"\");\r\n  };\r\n  const handleChange = (event) => {\r\n    if (event.target.files[0]) {\r\n      setinputFile(event.target.files[0]);\r\n    }\r\n  };\r\n  const onEmojiClick = (event, eventObj) => {\r\n    setinput(input + eventObj.emoji);\r\n  };\r\n  const onData = (recordedBlob) => {\r\n    // console.log(\"chunk of real-time data is: \", recordedBlob);\r\n  };\r\n\r\n  const onStop = (recordedBlob) => {\r\n  //  setaudio(recordedBlob.blobURL);\r\n  //  console.log(roomName);\r\n  //  console.log(messages);\r\n  \r\n  };\r\n  const sendAudio=(e)=>{\r\n  // setisAudio(true);\r\n  setrecord(false);\r\n  }\r\n  \r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat__header\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${roomid}.svg`} />\r\n        <div className=\"chat__headerInfo\">\r\n          <h3>{roomName}</h3>\r\n          {messages?.length > 0 ? (\r\n            <p>\r\n              last seen at...\r\n              {messages\r\n                ? new Date(\r\n                    messages[messages.length - 1]?.timestamp?.toDate()\r\n                  ).toUTCString()\r\n                : \"\"}\r\n            </p>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n        <div className=\"chat__headerRight\">\r\n          <IconButton>\r\n            <SearchIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <AttachFileIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"chat__body\" ref={scrollRef}>\r\n        {messages?.map((message,index) => (\r\n          <div>\r\n            <p\r\n              className={`chat__message ${\r\n                message.name === user.displayName && `chat__reciever`\r\n              }`\r\n              }\r\n            >\r\n              <span className=\"chat__name\">{message.name}</span>\r\n              <div className=\"chat__messageInfo\">\r\n                <p>{message.message}</p>\r\n                <span className=\"chat__timestamp\">\r\n                  {new Date(message.timestamp?.toDate()).toUTCString()}\r\n                </span>\r\n              </div>\r\n            </p>\r\n            {message.url ? (\r\n              <div\r\n                className={`chat__media ${\r\n                  message.name === user.displayName && `chat__reciever `\r\n                }`}\r\n              >\r\n                <embed src={message.url} />\r\n                <a href={message.url} download>\r\n                  <GetAppIcon />\r\n                </a>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chat__footer\">\r\n        {!progress ? (\r\n          <>\r\n            <button onClick={() => setshowEmoji(!showEmoji)}>\r\n              {showEmoji ? <ClearIcon /> : <InsertEmoticonIcon />}\r\n            </button>\r\n\r\n            {showEmoji && (\r\n              <Picker onEmojiClick={onEmojiClick} className=\"emoji__picker\" />\r\n            )}\r\n            <AttachFileIcon title=\"Attach\" className=\"attach__file\" />\r\n            <form action=\"post\" onSubmit={sendMessage}>\r\n              <input type=\"file\" name=\"\" id=\"\" onChange={handleChange} />\r\n              <input\r\n                type=\"text\"\r\n                value={input}\r\n                onChange={(e) => setinput(e.target.value)}\r\n                placeholder=\"Type a message\"\r\n              />\r\n\r\n              <button type=\"submit\">\r\n                {input.replaceAll(\" \", \"\") || inputFile ? (\r\n                  <SendIcon />\r\n                ) : (\r\n                  <div className=\"chat__footerRight\">\r\n                    <button onClick={() => setrecord(!record)} type=\"button\">\r\n                      {record ? (\r\n                        <ClearIcon className=\"clear__icon\" />\r\n                      ) : (\r\n                        <MicIcon />\r\n                      )}\r\n                    </button>\r\n                    <ReactMic\r\n                      record={record}\r\n                      className={`frequencyBars ${record}`}\r\n                      onStop={onStop}\r\n                      onData={onData}\r\n                      strokeColor=\"red\"\r\n                      backgroundColor=\"#f0f0f0\"\r\n                      visualSetting=\"sinewave\"\r\n                      mimeType=\"audio/mp3\"\r\n                    />\r\n                    {record && (\r\n                      <button\r\n                        className=\"right__icon\"\r\n                        onClick={sendAudio}\r\n                      >\r\n                        <CheckIcon />\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </button>\r\n            </form>\r\n          </>\r\n        ) : (\r\n          <progress\r\n            value={progress}\r\n            max=\"100\"\r\n            className=\"imageUploader-progress\"\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import { Avatar } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport db from './firebase';\r\nimport  './SidebarChat.css';\r\nfunction SidebarChat({addNewChat,id,name}) {\r\n    const [messages, setmessages] = useState([])\r\n    useEffect(() => {\r\n       if(id){\r\n           db.collection(\"rooms\").doc(id).collection(\"messages\").orderBy(\"timestamp\",\"desc\").onSnapshot(snapshot=>(\r\n               setmessages(snapshot.docs.map(doc=>doc.data()))\r\n           ))\r\n       }\r\n    }, [id])\r\n    const createChat=()=>{\r\n        const roomName=window.prompt(\"Please enter name for yor room\");\r\n        if(roomName?.replaceAll(' ','')){\r\n            db.collection(\"rooms\").add({\r\n                name:roomName\r\n            })\r\n        }\r\n    }\r\n    return !addNewChat?(\r\n        <Link to={`/rooms/${id}`}>\r\n            <div className=\"sidebarChat\">\r\n            <Avatar src={`https://avatars.dicebear.com/api/human/${id}.svg`}/>\r\n            <div className=\"sidebarChat__info\">\r\n                <h3>{name}</h3>\r\n                <p>{messages[0]?.message}</p>\r\n            </div>\r\n        </div>\r\n        </Link>\r\n    ):(\r\n        <div className=\"sidebarChat\" onClick={createChat}>\r\n            <h2>Add new Chat</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChat\r\n","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./SideBar.css\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport db, { auth } from './firebase';\r\nimport { useStatevalue } from \"./StateProvider\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nfunction SideBar() {\r\n  const [rooms, setrooms] = useState([]);\r\n  const [{ user },] = useStatevalue();\r\n  useEffect(() => {\r\n    const unsubscribe=db.collection(\"rooms\").onSnapshot(snapshot=>(\r\n      setrooms(snapshot.docs.map(doc=>({\r\n        id:doc.id,\r\n        data:doc.data()\r\n      })))\r\n    ))\r\n    return ()=>{\r\n      unsubscribe();\r\n    }\r\n  }, [ ])\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__header\">\r\n        <Avatar src={user?.photoURL}/>\r\n        <div className=\"sidebar__headerRight\">\r\n          <IconButton>\r\n            <DonutLargeIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <ChatIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n          <button onClick={e=>auth.signOut()} title=\"LogOut\" className=\"sidebar__logout\"><ExitToAppIcon/> </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebarSearch__container\">\r\n        <div className=\"sidebar__search\">\r\n          <SearchIcon />\r\n          <input type=\"text\" placeholder=\"Search or start new Chat\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__chats\">\r\n          <SidebarChat addNewChat/>\r\n         {rooms?.map(room=>(\r\n           <SidebarChat key={room.id} id={room.id} name={room.data.name}/>\r\n         ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SideBar;\r\n","import React from 'react'\r\nimport \"./Login.css\"\r\nimport{Button} from '@material-ui/core'\r\nimport { auth ,provider} from './firebase'\r\nimport { useStatevalue } from './StateProvider'\r\nfunction Login() {\r\n    const[,dispatch]=useStatevalue();\r\n    const signIn=async()=>{\r\n        try {\r\n            const result=await auth.signInWithPopup(provider);\r\n            dispatch({\r\n                type:\"SET_USER\",\r\n                user:result.user\r\n            })\r\n        } catch (error) {\r\n            alert(error.message)\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__container\">\r\n                <img src=\"https://image.flaticon.com/icons/png/512/124/124034.png\" alt=\"whatsapp\"/>\r\n                <div className=\"login__text\">\r\n                    <h2>Sign in to whatsapp</h2>\r\n                </div>\r\n                <Button onClick={signIn}>Sign in With Google</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React  from \"react\";\r\nimport \"./Welcome.css\";\r\nfunction Welcome() {\r\n  return (\r\n    <div className=\"welcome\">\r\n      <div className=\"welcome__container\">\r\n      <h2 className=\"welcome__info\">Welcome To Centralised Messaging dapp....</h2>\r\n      <video\r\n        className=\"welcome__video\"\r\n          loop\r\n          autoPlay\r\n          src=\"https://cdn.videvo.net/videvo_files/video/free/2013-09/small_watermarked/RedBloodCellsVidevo_preview.webm\"\r\n        ></video>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Welcome;\r\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport Chat from \"./Chat\";\nimport SideBar from \"./SideBar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport { useStatevalue } from \"./StateProvider\";\nimport firebase from 'firebase';\nimport Welcome from \"./Welcome\";\nfunction App() {\n  const [{ user }, dispatch] = useStatevalue();\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user)=>{\n      if(user){\n       \n        dispatch({\n          type:\"SET_USER\",\n          user:user\n      })\n      }\n      else{\n        dispatch({\n          type:\"SET_USER\",\n          user:null\n      })\n      }\n    })\n  }, [])\n  return (\n    <div className=\"app\">\n      {user ? (\n        <div className=\"app__body\">\n          <Router>\n          <SideBar />\n            <Switch>\n              <Route path=\"/\" exact>\n                <Welcome/>\n              </Route>\n              <Route path=\"/rooms/:roomid\">\n                <Chat />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      ) : (\n        <Login />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const initalState={\r\n    user:null\r\n}\r\nconst  reducer=(state,action)=>{\r\nswitch (action.type) {\r\n    case \"SET_USER\":\r\n        return{\r\n            ...state,\r\n            user:action.user\r\n        }\r\n\r\n    default:return state;\r\n    }\r\n    \r\n}\r\n\r\nexport default reducer","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {StateProvider} from './StateProvider';\nimport reducer,{initalState} from './reducer'\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initalState={initalState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}